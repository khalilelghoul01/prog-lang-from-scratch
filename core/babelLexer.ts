// Generated from grammar/babel.g4 by ANTLR 4.9.0-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class babelLexer extends Lexer {
	public static readonly T__0 = 1;
	public static readonly T__1 = 2;
	public static readonly T__2 = 3;
	public static readonly T__3 = 4;
	public static readonly T__4 = 5;
	public static readonly T__5 = 6;
	public static readonly T__6 = 7;
	public static readonly T__7 = 8;
	public static readonly T__8 = 9;
	public static readonly T__9 = 10;
	public static readonly T__10 = 11;
	public static readonly T__11 = 12;
	public static readonly T__12 = 13;
	public static readonly T__13 = 14;
	public static readonly T__14 = 15;
	public static readonly T__15 = 16;
	public static readonly T__16 = 17;
	public static readonly T__17 = 18;
	public static readonly T__18 = 19;
	public static readonly T__19 = 20;
	public static readonly T__20 = 21;
	public static readonly T__21 = 22;
	public static readonly T__22 = 23;
	public static readonly T__23 = 24;
	public static readonly T__24 = 25;
	public static readonly T__25 = 26;
	public static readonly T__26 = 27;
	public static readonly T__27 = 28;
	public static readonly T__28 = 29;
	public static readonly T__29 = 30;
	public static readonly T__30 = 31;
	public static readonly T__31 = 32;
	public static readonly BOOL = 33;
	public static readonly STRING = 34;
	public static readonly FLOAT = 35;
	public static readonly INTEGER = 36;
	public static readonly CHAR = 37;
	public static readonly WS = 38;
	public static readonly COMMENT = 39;
	public static readonly LINE_COMMENT = 40;
	public static readonly IDENTIFIER = 41;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
		"T__17", "T__18", "T__19", "T__20", "T__21", "T__22", "T__23", "T__24", 
		"T__25", "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", "BOOL", 
		"STRING", "FLOAT", "INTEGER", "CHAR", "WS", "COMMENT", "LINE_COMMENT", 
		"IDENTIFIER",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, "';'", "'='", "'let'", "'const'", "'if'", "'('", "')'", "'{'", 
		"'}'", "'else'", "'while'", "'?'", "':'", "'!'", "'-'", "'*'", "'/'", 
		"'%'", "'+'", "'<'", "'>'", "'<='", "'>='", "'=='", "'!='", "'&&'", "'||'", 
		"'['", "','", "']'", "'function'", "'return'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, "BOOL", "STRING", 
		"FLOAT", "INTEGER", "CHAR", "WS", "COMMENT", "LINE_COMMENT", "IDENTIFIER",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(babelLexer._LITERAL_NAMES, babelLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return babelLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(babelLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "babel.g4"; }

	// @Override
	public get ruleNames(): string[] { return babelLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return babelLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return babelLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return babelLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02+\u010C\b\x01" +
		"\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06" +
		"\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r" +
		"\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t" +
		"\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t" +
		"\x17\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t" +
		"\x1C\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04\"\t" +
		"\"\x04#\t#\x04$\t$\x04%\t%\x04&\t&\x04\'\t\'\x04(\t(\x04)\t)\x04*\t*\x03" +
		"\x02\x03\x02\x03\x03\x03\x03\x03\x04\x03\x04\x03\x04\x03\x04\x03\x05\x03" +
		"\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x06\x03\x06\x03\x06\x03\x07\x03" +
		"\x07\x03\b\x03\b\x03\t\x03\t\x03\n\x03\n\x03\v\x03\v\x03\v\x03\v\x03\v" +
		"\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\r\x03\r\x03\x0E\x03\x0E\x03\x0F" +
		"\x03\x0F\x03\x10\x03\x10\x03\x11\x03\x11\x03\x12\x03\x12\x03\x13\x03\x13" +
		"\x03\x14\x03\x14\x03\x15\x03\x15\x03\x16\x03\x16\x03\x17\x03\x17\x03\x17" +
		"\x03\x18\x03\x18\x03\x18\x03\x19\x03\x19\x03\x19\x03\x1A\x03\x1A\x03\x1A" +
		"\x03\x1B\x03\x1B\x03\x1B\x03\x1C\x03\x1C\x03\x1C\x03\x1D\x03\x1D\x03\x1E" +
		"\x03\x1E\x03\x1F\x03\x1F\x03 \x03 \x03 \x03 \x03 \x03 \x03 \x03 \x03 " +
		"\x03!\x03!\x03!\x03!\x03!\x03!\x03!\x03\"\x03\"\x03\"\x03\"\x03\"\x03" +
		"\"\x03\"\x03\"\x03\"\x05\"\xBF\n\"\x03#\x03#\x07#\xC3\n#\f#\x0E#\xC6\v" +
		"#\x03#\x03#\x03$\x06$\xCB\n$\r$\x0E$\xCC\x03$\x03$\x06$\xD1\n$\r$\x0E" +
		"$\xD2\x03%\x06%\xD6\n%\r%\x0E%\xD7\x03&\x03&\x03&\x03&\x05&\xDE\n&\x03" +
		"&\x03&\x03\'\x06\'\xE3\n\'\r\'\x0E\'\xE4\x03\'\x03\'\x03(\x03(\x03(\x03" +
		"(\x07(\xED\n(\f(\x0E(\xF0\v(\x03(\x03(\x03(\x03(\x03(\x03)\x03)\x03)\x03" +
		")\x07)\xFB\n)\f)\x0E)\xFE\v)\x03)\x03)\x03*\x03*\x07*\u0104\n*\f*\x0E" +
		"*\u0107\v*\x06*\u0109\n*\r*\x0E*\u010A\x03\xEE\x02\x02+\x03\x02\x03\x05" +
		"\x02\x04\x07\x02\x05\t\x02\x06\v\x02\x07\r\x02\b\x0F\x02\t\x11\x02\n\x13" +
		"\x02\v\x15\x02\f\x17\x02\r\x19\x02\x0E\x1B\x02\x0F\x1D\x02\x10\x1F\x02" +
		"\x11!\x02\x12#\x02\x13%\x02\x14\'\x02\x15)\x02\x16+\x02\x17-\x02\x18/" +
		"\x02\x191\x02\x1A3\x02\x1B5\x02\x1C7\x02\x1D9\x02\x1E;\x02\x1F=\x02 ?" +
		"\x02!A\x02\"C\x02#E\x02$G\x02%I\x02&K\x02\'M\x02(O\x02)Q\x02*S\x02+\x03" +
		"\x02\b\x03\x02$$\x03\x022;\x05\x02\v\f\x0F\x0F\"\"\x04\x02\f\f\x0F\x0F" +
		"\x05\x02C\\aac|\x06\x022;C\\aac|\x02\u0116\x02\x03\x03\x02\x02\x02\x02" +
		"\x05\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02\t\x03\x02\x02\x02\x02" +
		"\v\x03\x02\x02\x02\x02\r\x03\x02\x02\x02\x02\x0F\x03\x02\x02\x02\x02\x11" +
		"\x03\x02\x02\x02\x02\x13\x03\x02\x02\x02\x02\x15\x03\x02\x02\x02\x02\x17" +
		"\x03\x02\x02\x02\x02\x19\x03\x02\x02\x02\x02\x1B\x03\x02\x02\x02\x02\x1D" +
		"\x03\x02\x02\x02\x02\x1F\x03\x02\x02\x02\x02!\x03\x02\x02\x02\x02#\x03" +
		"\x02\x02\x02\x02%\x03\x02\x02\x02\x02\'\x03\x02\x02\x02\x02)\x03\x02\x02" +
		"\x02\x02+\x03\x02\x02\x02\x02-\x03\x02\x02\x02\x02/\x03\x02\x02\x02\x02" +
		"1\x03\x02\x02\x02\x023\x03\x02\x02\x02\x025\x03\x02\x02\x02\x027\x03\x02" +
		"\x02\x02\x029\x03\x02\x02\x02\x02;\x03\x02\x02\x02\x02=\x03\x02\x02\x02" +
		"\x02?\x03\x02\x02\x02\x02A\x03\x02\x02\x02\x02C\x03\x02\x02\x02\x02E\x03" +
		"\x02\x02\x02\x02G\x03\x02\x02\x02\x02I\x03\x02\x02\x02\x02K\x03\x02\x02" +
		"\x02\x02M\x03\x02\x02\x02\x02O\x03\x02\x02\x02\x02Q\x03\x02\x02\x02\x02" +
		"S\x03\x02\x02\x02\x03U\x03\x02\x02\x02\x05W\x03\x02\x02\x02\x07Y\x03\x02" +
		"\x02\x02\t]\x03\x02\x02\x02\vc\x03\x02\x02\x02\rf\x03\x02\x02\x02\x0F" +
		"h\x03\x02\x02\x02\x11j\x03\x02\x02\x02\x13l\x03\x02\x02\x02\x15n\x03\x02" +
		"\x02\x02\x17s\x03\x02\x02\x02\x19y\x03\x02\x02\x02\x1B{\x03\x02\x02\x02" +
		"\x1D}\x03\x02\x02\x02\x1F\x7F\x03\x02\x02\x02!\x81\x03\x02\x02\x02#\x83" +
		"\x03\x02\x02\x02%\x85\x03\x02\x02\x02\'\x87\x03\x02\x02\x02)\x89\x03\x02" +
		"\x02\x02+\x8B\x03\x02\x02\x02-\x8D\x03\x02\x02\x02/\x90\x03\x02\x02\x02" +
		"1\x93\x03\x02\x02\x023\x96\x03\x02\x02\x025\x99\x03\x02\x02\x027\x9C\x03" +
		"\x02\x02\x029\x9F\x03\x02\x02\x02;\xA1\x03\x02\x02\x02=\xA3\x03\x02\x02" +
		"\x02?\xA5\x03\x02\x02\x02A\xAE\x03\x02\x02\x02C\xBE\x03\x02\x02\x02E\xC0" +
		"\x03\x02\x02\x02G\xCA\x03\x02\x02\x02I\xD5\x03\x02\x02\x02K\xD9\x03\x02" +
		"\x02\x02M\xE2\x03\x02\x02\x02O\xE8\x03\x02\x02\x02Q\xF6\x03\x02\x02\x02" +
		"S\u0108\x03\x02\x02\x02UV\x07=\x02\x02V\x04\x03\x02\x02\x02WX\x07?\x02" +
		"\x02X\x06\x03\x02\x02\x02YZ\x07n\x02\x02Z[\x07g\x02\x02[\\\x07v\x02\x02" +
		"\\\b\x03\x02\x02\x02]^\x07e\x02\x02^_\x07q\x02\x02_`\x07p\x02\x02`a\x07" +
		"u\x02\x02ab\x07v\x02\x02b\n\x03\x02\x02\x02cd\x07k\x02\x02de\x07h\x02" +
		"\x02e\f\x03\x02\x02\x02fg\x07*\x02\x02g\x0E\x03\x02\x02\x02hi\x07+\x02" +
		"\x02i\x10\x03\x02\x02\x02jk\x07}\x02\x02k\x12\x03\x02\x02\x02lm\x07\x7F" +
		"\x02\x02m\x14\x03\x02\x02\x02no\x07g\x02\x02op\x07n\x02\x02pq\x07u\x02" +
		"\x02qr\x07g\x02\x02r\x16\x03\x02\x02\x02st\x07y\x02\x02tu\x07j\x02\x02" +
		"uv\x07k\x02\x02vw\x07n\x02\x02wx\x07g\x02\x02x\x18\x03\x02\x02\x02yz\x07" +
		"A\x02\x02z\x1A\x03\x02\x02\x02{|\x07<\x02\x02|\x1C\x03\x02\x02\x02}~\x07" +
		"#\x02\x02~\x1E\x03\x02\x02\x02\x7F\x80\x07/\x02\x02\x80 \x03\x02\x02\x02" +
		"\x81\x82\x07,\x02\x02\x82\"\x03\x02\x02\x02\x83\x84\x071\x02\x02\x84$" +
		"\x03\x02\x02\x02\x85\x86\x07\'\x02\x02\x86&\x03\x02\x02\x02\x87\x88\x07" +
		"-\x02\x02\x88(\x03\x02\x02\x02\x89\x8A\x07>\x02\x02\x8A*\x03\x02\x02\x02" +
		"\x8B\x8C\x07@\x02\x02\x8C,\x03\x02\x02\x02\x8D\x8E\x07>\x02\x02\x8E\x8F" +
		"\x07?\x02\x02\x8F.\x03\x02\x02\x02\x90\x91\x07@\x02\x02\x91\x92\x07?\x02" +
		"\x02\x920\x03\x02\x02\x02\x93\x94\x07?\x02\x02\x94\x95\x07?\x02\x02\x95" +
		"2\x03\x02\x02\x02\x96\x97\x07#\x02\x02\x97\x98\x07?\x02\x02\x984\x03\x02" +
		"\x02\x02\x99\x9A\x07(\x02\x02\x9A\x9B\x07(\x02\x02\x9B6\x03\x02\x02\x02" +
		"\x9C\x9D\x07~\x02\x02\x9D\x9E\x07~\x02\x02\x9E8\x03\x02\x02\x02\x9F\xA0" +
		"\x07]\x02\x02\xA0:\x03\x02\x02\x02\xA1\xA2\x07.\x02\x02\xA2<\x03\x02\x02" +
		"\x02\xA3\xA4\x07_\x02\x02\xA4>\x03\x02\x02\x02\xA5\xA6\x07h\x02\x02\xA6" +
		"\xA7\x07w\x02\x02\xA7\xA8\x07p\x02\x02\xA8\xA9\x07e\x02\x02\xA9\xAA\x07" +
		"v\x02\x02\xAA\xAB\x07k\x02\x02\xAB\xAC\x07q\x02\x02\xAC\xAD\x07p\x02\x02" +
		"\xAD@\x03\x02\x02\x02\xAE\xAF\x07t\x02\x02\xAF\xB0\x07g\x02\x02\xB0\xB1" +
		"\x07v\x02\x02\xB1\xB2\x07w\x02\x02\xB2\xB3\x07t\x02\x02\xB3\xB4\x07p\x02" +
		"\x02\xB4B\x03\x02\x02\x02\xB5\xB6\x07v\x02\x02\xB6\xB7\x07t\x02\x02\xB7" +
		"\xB8\x07w\x02\x02\xB8\xBF\x07g\x02\x02\xB9\xBA\x07h\x02\x02\xBA\xBB\x07" +
		"c\x02\x02\xBB\xBC\x07n\x02\x02\xBC\xBD\x07u\x02\x02\xBD\xBF\x07g\x02\x02" +
		"\xBE\xB5\x03\x02\x02\x02\xBE\xB9\x03\x02\x02\x02\xBFD\x03\x02\x02\x02" +
		"\xC0\xC4\x07$\x02\x02\xC1\xC3\n\x02\x02\x02\xC2\xC1\x03\x02\x02\x02\xC3" +
		"\xC6\x03\x02\x02\x02\xC4\xC2\x03\x02\x02\x02\xC4\xC5\x03\x02\x02\x02\xC5" +
		"\xC7\x03\x02\x02\x02\xC6\xC4\x03\x02\x02\x02\xC7\xC8\x07$\x02\x02\xC8" +
		"F\x03\x02\x02\x02\xC9\xCB\t\x03\x02\x02\xCA\xC9\x03\x02\x02\x02\xCB\xCC" +
		"\x03\x02\x02\x02\xCC\xCA\x03\x02\x02\x02\xCC\xCD\x03\x02\x02\x02\xCD\xCE" +
		"\x03\x02\x02\x02\xCE\xD0\x070\x02\x02\xCF\xD1\t\x03\x02\x02\xD0\xCF\x03" +
		"\x02\x02\x02\xD1\xD2\x03\x02\x02\x02\xD2\xD0\x03\x02\x02\x02\xD2\xD3\x03" +
		"\x02\x02\x02\xD3H\x03\x02\x02\x02\xD4\xD6\t\x03\x02\x02\xD5\xD4\x03\x02" +
		"\x02\x02\xD6\xD7\x03\x02\x02\x02\xD7\xD5\x03\x02\x02\x02\xD7\xD8\x03\x02" +
		"\x02\x02\xD8J\x03\x02\x02\x02\xD9\xDD\x07)\x02\x02\xDA\xDE\v\x02\x02\x02" +
		"\xDB\xDC\x07^\x02\x02\xDC\xDE\v\x02\x02\x02\xDD\xDA\x03\x02\x02\x02\xDD" +
		"\xDB\x03\x02\x02\x02\xDE\xDF\x03\x02\x02\x02\xDF\xE0\x07)\x02\x02\xE0" +
		"L\x03\x02\x02\x02\xE1\xE3\t\x04\x02\x02\xE2\xE1\x03\x02\x02\x02\xE3\xE4" +
		"\x03\x02\x02\x02\xE4\xE2\x03\x02\x02\x02\xE4\xE5\x03\x02\x02\x02\xE5\xE6" +
		"\x03\x02\x02\x02\xE6\xE7\b\'\x02\x02\xE7N\x03\x02\x02\x02\xE8\xE9\x07" +
		"1\x02\x02\xE9\xEA\x07,\x02\x02\xEA\xEE\x03\x02\x02\x02\xEB\xED\v\x02\x02" +
		"\x02\xEC\xEB\x03\x02\x02\x02\xED\xF0\x03\x02\x02\x02\xEE\xEF\x03\x02\x02" +
		"\x02\xEE\xEC\x03\x02\x02\x02\xEF\xF1\x03\x02\x02\x02\xF0\xEE\x03\x02\x02" +
		"\x02\xF1\xF2\x07,\x02\x02\xF2\xF3\x071\x02\x02\xF3\xF4\x03\x02\x02\x02" +
		"\xF4\xF5\b(\x02\x02\xF5P\x03\x02\x02\x02\xF6\xF7\x071\x02\x02\xF7\xF8" +
		"\x071\x02\x02\xF8\xFC\x03\x02\x02\x02\xF9\xFB\n\x05\x02\x02\xFA\xF9\x03" +
		"\x02\x02\x02\xFB\xFE\x03\x02\x02\x02\xFC\xFA\x03\x02\x02\x02\xFC\xFD\x03" +
		"\x02\x02\x02\xFD\xFF\x03\x02\x02\x02\xFE\xFC\x03\x02\x02\x02\xFF\u0100" +
		"\b)\x02\x02\u0100R\x03\x02\x02\x02\u0101\u0105\t\x06\x02\x02\u0102\u0104" +
		"\t\x07\x02\x02\u0103\u0102\x03\x02\x02\x02\u0104\u0107\x03\x02\x02\x02" +
		"\u0105\u0103\x03\x02\x02\x02\u0105\u0106\x03\x02\x02\x02\u0106\u0109\x03" +
		"\x02\x02\x02\u0107\u0105\x03\x02\x02\x02\u0108\u0101\x03\x02\x02\x02\u0109" +
		"\u010A\x03\x02\x02\x02\u010A\u0108\x03\x02\x02\x02\u010A\u010B\x03\x02" +
		"\x02\x02\u010BT\x03\x02\x02\x02\x0E\x02\xBE\xC4\xCC\xD2\xD7\xDD\xE4\xEE" +
		"\xFC\u0105\u010A\x03\b\x02\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!babelLexer.__ATN) {
			babelLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(babelLexer._serializedATN));
		}

		return babelLexer.__ATN;
	}

}

